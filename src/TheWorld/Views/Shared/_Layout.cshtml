<!DOCTYPE html>
<html>
<head>
  <title>The World - @ViewBag.Title</title>
  <meta charset="utf-8" />
  @*the ~/ says replace me with whatever the root of the website is*@
  <link href="~/lib/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
  <link href="~/lib/bootswatch/yeti/bootstrap.min.css" rel="stylesheet" />
  <link href="~/lib/fontawesome/css/font-awesome.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="~/css/site.css" />
</head>
<body>

  <div id="sidebar">
    @if (User.Identity.IsAuthenticated)
    {
      <img src="~/img/homer.png" alt="Homer" class="headshot" />
      <span id="username">@User.Identity.Name</span>
    }
    <ul class="nav">

      @*This code is fragile - if routing patterns change, code is broken*@
      @*<li class="active"><a href="#">Home</a></li>
        <li><a href="~/App/About">About</a></li>
        <li><a href="~/App/Contact">Contact</a></li>*@

      @*Use tag helpers to buid less fragile code; code below won't break if route patterns change*@
      @*But you must enable tag helpers in the project*@
      <li class="active"><a asp-controller="App" asp-action="Index">Home</a></li>
      <li><a asp-controller="App" asp-action="Contact">Contact</a></li>
      <li><a asp-controller="App" asp-action="About">About</a></li>

      @if (User.Identity.IsAuthenticated)
      {
        <li><a asp-controller="App" asp-action="Trips">My Trips</a></li>
        <li><a asp-controller="Auth" asp-action="Logout">Logout</a></li>
      }

    </ul>

  </div>
  <div id="wrapper">
    <nav class="navbar navbar-inverse">
      <div class="container-fluid">
        <ul class="nav navbar-nav navbar-left">
          <li>
            <button id="sidebarToggle" class="btn btn-primary">
              @*SW indicates that font awesome is coming along, for Boostrap 4, to replace Bootstrap 3 glyphs*@
              <i class="fa fa-angle-left"></i>
            </button>
          </li>
        </ul>
        <a asp-controller="App" asp-action="Index" class="navbar-brand">The World</a>
        <ul class="nav navbar-nav navbar-right">
          <li>
            <a href="#" class="btn btn-sm btn-info">
              <i class="fa fa-save"></i> Save
            </a>
          </li>
          <li>
            <a href="#" class="btn btn-sm btn-info">
              <i class="fa fa-print"></i> Print
            </a>
          </li>
        </ul>
      </div>
    </nav>

    <div id="main" class="container-fluid">
      @RenderBody()
    </div>
    <div id="footer" class="container-fluid">
      <div class="navbar navbar-inverse navbar-fixed-bottom">
        <h4 class="text-center text-info">&copy;2016 The World Ltd.</h4>
      </div>
    </div>
  </div>

  <script type="text/javascript" src="~/lib/jquery/dist/jquery.min.js"></script>
  <script src="~/lib/bootstrap/dist/js/bootstrap.min.js"></script>
  <script type="text/javascript" src="~/js/site.js"></script>


  @*if a view, that uses this layout, has scripts in a section scripts block, they will
    emit here.   *@

  @*from https://weblogs.asp.net/scottgu/asp-net-mvc-3-layouts-and-sections-with-razor*@
  @*The first parameter to the “RenderSection()” helper method specifies the name of the section we want to
    render at that location in the layout template.  The second parameter is optional, and allows us to
    define whether the section we are rendering is required or not.  If a section is “required”, then
    Razor will throw an error at runtime if that section is not implemented within a view template that
     is based on the layout file (which can make it easier to track down content errors).  If a section
    is not required, then its presence within a view template is optional, and the above RenderSection()
     code will render nothing at runtime if it isn’t defined.*@

  @RenderSection("scripts", false)





</body>
</html>